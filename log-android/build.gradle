import build.*

apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "org.jetbrains.dokka-android"
apply plugin: "com.jfrog.bintray"
apply plugin: "com.github.ben-manes.versions"

archivesBaseName = "log-android"
group = ProjectProperties.groupId
version = ProjectProperties.versionName

android {
    compileSdkVersion(29)

    defaultConfig {
        minSdkVersion(14)
        targetSdkVersion(29)
        versionCode = ProjectProperties.versionCode
        versionName = ProjectProperties.versionName
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro")
        }
    }
}

dependencies {
    implementation(project(":log"))
    implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")
    testImplementation("junit:junit:4.13")
}

task sourcesJar(type: Jar) {
    archiveClassifier = "sources"
    from(android.sourceSets.main.java.srcDirs)
}

artifacts {
    archives sourcesJar
}

uploadArchives {
    repositories.mavenDeployer {
        repository(url: "file:$buildDir/maven")
        pom.project {
            name = archivesBaseName
            url = ProjectProperties.Url.site

            groupId = ProjectProperties.groupId
            artifactId = archivesBaseName
            version = ProjectProperties.versionName
            licenses {
                license {
                    name = "The MIT License"
                    url = "https://opensource.org/licenses/MIT"
                    distribution = "repo"
                }
            }
            scm {
                connection = ProjectProperties.Url.scm
                url = ProjectProperties.Url.github
            }
        }
    }
}

publishing {
    publications {
        bintray(MavenPublication) {
            artifact("$buildDir/outputs/aar/${archivesBaseName}-release.aar")
            groupId = ProjectProperties.groupId
            artifactId = archivesBaseName
            version = ProjectProperties.versionName

            artifact sourcesJar

            pom.withXml {
                def node = asNode()

                def licenses = node.appendNode("licenses")
                appendLicense(licenses, "The MIT License", "https://opensource.org/licenses/MIT", "repo")

                appendScm(node, ProjectProperties.Url.scm, ProjectProperties.Url.github)

                def dependencies = node.appendNode("dependencies")
                configurations.api.dependencies.each {
                    appendDependency(dependencies, it.group, it.name, it.version, "compile")
                }
                configurations.implementation.dependencies.each {
                    appendDependency(dependencies, it.group, it.name, it.version, "runtime")
                }
            }
        }
    }
}

static def appendLicense(parentNode, name, url, distribution) {
    def node = parentNode.appendNode("license")
    node.appendNode("name", name)
    node.appendNode("url", url)
    node.appendNode("distribution", distribution)
}

static def appendScm(parentNode, connection, url) {
    def node = parentNode.appendNode("scm")
    node.appendNode("connection", connection)
    node.appendNode("url", url)
}

static def appendDependency(parentNode, groupId, artifactId, version, scope) {
    def node = parentNode.appendNode("dependency")
    node.appendNode("groupId", groupId)
    node.appendNode("artifactId", artifactId)
    node.appendNode("version", version)
    node.appendNode("scope", scope)
}

bintray {
    user = project.hasProperty("bintray_user") ? bintray_user : ""
    key = project.hasProperty("bintray_key") ? bintray_key : ""
    publications = ["bintray"]

    dryRun = true

    pkg {
        repo = "maven"
        name = ProjectProperties.groupId + "." + archivesBaseName
        licenses = ["MIT"]
        websiteUrl = ProjectProperties.Url.site
        issueTrackerUrl = ProjectProperties.Url.github + "/blob/master/LICENSE"
        vcsUrl = ProjectProperties.Url.github + ".git"
        issueTrackerUrl = ProjectProperties.Url.github + "/issues"
        publicDownloadNumbers = true
        version {
            name = project.version
        }
    }
}

bintrayUpload.dependsOn assemble

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}
